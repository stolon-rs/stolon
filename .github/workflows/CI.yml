name: CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  rust_stable: stable
  rust_clippy: 1.61.0
  rust_min: 1.61.0
  
defaults:
  run:
    shell: bash

jobs:
  tests-pass:
    name: all systems go
    runs-on: ubuntu-latest
    needs:
      - test
      - fmt
      - clippy
    steps:
      - run: exit 0
      
  test:
    name: test stolon 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest  
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_stable }}
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ env.rust_stable }}
            override: true
      - name: Install Rust
        run: rustup update stable
      - uses: Swatinem/rust-cache@v1
      - name: Install cargo-hack
        run: cargo install cargo-hack
          
      - name: test all 
        run: cargo test --workspace 

  fmt:
    name: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_stable }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_stable }}
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - name: "rustfmt --check"
        run: |
          if ! rustfmt --check --edition 2021 $(git ls-files '*.rs'); then
            printf "Please run \`rustfmt --edition 2021 \$(git ls-files '*.rs')\` to fix rustfmt errors.\nSee CONTRIBUTING.md for more details.\n" >&2
            exit 1
          fi
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_clippy }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_clippy }}
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - name: "clippy --all"
        run: cargo clippy --all --tests 
        
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest  

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --release --verbose
    - name: Run tests
      run: cargo test --verbose
